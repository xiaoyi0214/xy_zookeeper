<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.xiaoyi</groupId>
    <artifactId>zookeeper_demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>zookeeper_demo</name>
    <description>zookeeper_demo Demo</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--
        Zookeeper API不足之处

        （1）Watcher注册是一次性的，每次触发之后都需要重新进行注册；
        （2）Session超时之后没有实现重连机制；
        （3）异常处理繁琐，Zookeeper提供了很多异常，对于开发人员来说可能根本不知道该如何处理这些异常信息；
        （4）只提供了简单的byte[]数组的接口，没有提供针对对象级别的序列化；
        （5）创建节点时如果节点存在抛出异常，需要自行检查节点是否存在；
        （6）删除节点无法实现级联删除；
        基于以上原因，直接使用Zookeeper原生API的人并不多。
        -->
<!--        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.6.2</version>
        </dependency>-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <!--
        Apache Curator
        Apache 的开源项目
        解决Watch注册一次就会失效的问题
        提供一套Fluent风格的 API 更加简单易用
        提供更多解决方案并且实现简单，例如：分布式锁
        提供常用的ZooKeeper工具类
        编程风格更舒服
        除此之外，Curator中还提供了Zookeeper各种应用场景（Recipe，如共享锁服务、Master选举机制和分布式计算器等）的抽象封装
        -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>4.0.1</version>
        </dependency>
        <!--
        ZkClient是一个开源客户端，在Zookeeper原生API接口的基础上进行了包装，更便于开发人员使用。解决如下问题：

        1）session会话超时重连
        2）解决Watcher反复注册
        3）简化API开发
        虽然 ZkClient 对原生 API 进行了封装，但也有它自身的不足之处：

        几乎没有参考文档；
        异常处理简化（抛出RuntimeException）；
        重试机制比较难用；
        没有提供各种使用场景的实现；
        -->
        <dependency>
            <groupId>com.101tec</groupId>
            <artifactId>zkclient</artifactId>
            <version>0.11</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>29.0-jre</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.6.2</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>